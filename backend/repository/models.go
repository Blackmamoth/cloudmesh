// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type JobStatusEnum string

const (
	JobStatusEnumQueued     JobStatusEnum = "queued"
	JobStatusEnumProcessing JobStatusEnum = "processing"
	JobStatusEnumSucceeded  JobStatusEnum = "succeeded"
	JobStatusEnumFailed     JobStatusEnum = "failed"
	JobStatusEnumRetrying   JobStatusEnum = "retrying"
)

func (e *JobStatusEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = JobStatusEnum(s)
	case string:
		*e = JobStatusEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for JobStatusEnum: %T", src)
	}
	return nil
}

type NullJobStatusEnum struct {
	JobStatusEnum JobStatusEnum `json:"job_status_enum"`
	Valid         bool          `json:"valid"` // Valid is true if JobStatusEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullJobStatusEnum) Scan(value interface{}) error {
	if value == nil {
		ns.JobStatusEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.JobStatusEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullJobStatusEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.JobStatusEnum), nil
}

type ProviderEnum string

const (
	ProviderEnumGoogle  ProviderEnum = "google"
	ProviderEnumDropbox ProviderEnum = "dropbox"
)

func (e *ProviderEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ProviderEnum(s)
	case string:
		*e = ProviderEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for ProviderEnum: %T", src)
	}
	return nil
}

type NullProviderEnum struct {
	ProviderEnum ProviderEnum `json:"provider_enum"`
	Valid        bool         `json:"valid"` // Valid is true if ProviderEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullProviderEnum) Scan(value interface{}) error {
	if value == nil {
		ns.ProviderEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ProviderEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullProviderEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ProviderEnum), nil
}

type Account struct {
	ID                    string           `json:"id"`
	AccountID             string           `json:"account_id"`
	ProviderID            string           `json:"provider_id"`
	UserID                string           `json:"user_id"`
	AccessToken           pgtype.Text      `json:"access_token"`
	RefreshToken          pgtype.Text      `json:"refresh_token"`
	IDToken               pgtype.Text      `json:"id_token"`
	AccessTokenExpiresAt  pgtype.Timestamp `json:"access_token_expires_at"`
	RefreshTokenExpiresAt pgtype.Timestamp `json:"refresh_token_expires_at"`
	Scope                 pgtype.Text      `json:"scope"`
	Password              pgtype.Text      `json:"password"`
	CreatedAt             pgtype.Timestamp `json:"created_at"`
	UpdatedAt             pgtype.Timestamp `json:"updated_at"`
}

type DrizzleDrizzleMigration struct {
	ID        int32       `json:"id"`
	Hash      string      `json:"hash"`
	CreatedAt pgtype.Int8 `json:"created_at"`
}

type JobLog struct {
	ID         pgtype.UUID        `json:"id"`
	JobID      string             `json:"job_id"`
	AccountID  pgtype.UUID        `json:"account_id"`
	Type       string             `json:"type"`
	Status     JobStatusEnum      `json:"status"`
	Queue      string             `json:"queue"`
	Params     []byte             `json:"params"`
	Error      pgtype.Text        `json:"error"`
	Retries    pgtype.Int4        `json:"retries"`
	StartedAt  pgtype.Timestamptz `json:"started_at"`
	FinishedAt pgtype.Timestamptz `json:"finished_at"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

type Jwk struct {
	ID         string           `json:"id"`
	PublicKey  string           `json:"public_key"`
	PrivateKey string           `json:"private_key"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
}

type LinkedAccount struct {
	ID             pgtype.UUID        `json:"id"`
	UserID         string             `json:"user_id"`
	Provider       ProviderEnum       `json:"provider"`
	ProviderUserID string             `json:"provider_user_id"`
	Name           string             `json:"name"`
	Email          string             `json:"email"`
	AvatarUrl      pgtype.Text        `json:"avatar_url"`
	AccessToken    string             `json:"access_token"`
	RefreshToken   string             `json:"refresh_token"`
	TokenType      pgtype.Text        `json:"token_type"`
	Expiry         pgtype.Timestamptz `json:"expiry"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	LastSyncedAt   pgtype.Timestamptz `json:"last_synced_at"`
	SyncPageToken  pgtype.Text        `json:"sync_page_token"`
}

type Session struct {
	ID        string           `json:"id"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
	Token     string           `json:"token"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
	IpAddress pgtype.Text      `json:"ip_address"`
	UserAgent pgtype.Text      `json:"user_agent"`
	UserID    string           `json:"user_id"`
}

type SyncedItem struct {
	ID             pgtype.UUID        `json:"id"`
	AccountID      pgtype.UUID        `json:"account_id"`
	ProviderFileID string             `json:"provider_file_id"`
	Name           string             `json:"name"`
	Extension      string             `json:"extension"`
	Size           int64              `json:"size"`
	ParentFolder   pgtype.Text        `json:"parent_folder"`
	IsFolder       bool               `json:"is_folder"`
	MimeType       pgtype.Text        `json:"mime_type"`
	CreatedTime    pgtype.Timestamptz `json:"created_time"`
	ModifiedTime   pgtype.Timestamptz `json:"modified_time"`
	ThumbnailLink  pgtype.Text        `json:"thumbnail_link"`
	PreviewLink    pgtype.Text        `json:"preview_link"`
	WebViewLink    pgtype.Text        `json:"web_view_link"`
	WebContentLink pgtype.Text        `json:"web_content_link"`
	LinkExpiresAt  pgtype.Timestamptz `json:"link_expires_at"`
	ContentHash    pgtype.Text        `json:"content_hash"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}

type User struct {
	ID            string           `json:"id"`
	Name          string           `json:"name"`
	Email         string           `json:"email"`
	EmailVerified bool             `json:"email_verified"`
	Image         pgtype.Text      `json:"image"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
}

type Verification struct {
	ID         string           `json:"id"`
	Identifier string           `json:"identifier"`
	Value      string           `json:"value"`
	ExpiresAt  pgtype.Timestamp `json:"expires_at"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	UpdatedAt  pgtype.Timestamp `json:"updated_at"`
}
