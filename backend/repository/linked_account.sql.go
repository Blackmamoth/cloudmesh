// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: linked_account.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addAccountDetails = `-- name: AddAccountDetails :one
INSERT INTO linked_account (
    user_id, provider, provider_user_id, access_token, refresh_token, token_type, expiry, email, name, avatar_url
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING id
`

type AddAccountDetailsParams struct {
	UserID         string             `json:"user_id"`
	Provider       ProviderEnum       `json:"provider"`
	ProviderUserID string             `json:"provider_user_id"`
	AccessToken    string             `json:"access_token"`
	RefreshToken   string             `json:"refresh_token"`
	TokenType      pgtype.Text        `json:"token_type"`
	Expiry         pgtype.Timestamptz `json:"expiry"`
	Email          string             `json:"email"`
	Name           string             `json:"name"`
	AvatarUrl      pgtype.Text        `json:"avatar_url"`
}

func (q *Queries) AddAccountDetails(ctx context.Context, arg AddAccountDetailsParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, addAccountDetails,
		arg.UserID,
		arg.Provider,
		arg.ProviderUserID,
		arg.AccessToken,
		arg.RefreshToken,
		arg.TokenType,
		arg.Expiry,
		arg.Email,
		arg.Name,
		arg.AvatarUrl,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const getAccountByProviderID = `-- name: GetAccountByProviderID :one
SELECT id FROM linked_account WHERE user_id = $1 AND provider = $2 AND provider_user_id = $3 LIMIT 1
`

type GetAccountByProviderIDParams struct {
	UserID         string       `json:"user_id"`
	Provider       ProviderEnum `json:"provider"`
	ProviderUserID string       `json:"provider_user_id"`
}

func (q *Queries) GetAccountByProviderID(ctx context.Context, arg GetAccountByProviderIDParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, getAccountByProviderID, arg.UserID, arg.Provider, arg.ProviderUserID)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const getAuthTokens = `-- name: GetAuthTokens :one
SELECT provider, access_token, refresh_token FROM linked_account WHERE
user_id = $1 AND id = $2
`

type GetAuthTokensParams struct {
	UserID    string      `json:"user_id"`
	AccountID pgtype.UUID `json:"account_id"`
}

type GetAuthTokensRow struct {
	Provider     ProviderEnum `json:"provider"`
	AccessToken  string       `json:"access_token"`
	RefreshToken string       `json:"refresh_token"`
}

func (q *Queries) GetAuthTokens(ctx context.Context, arg GetAuthTokensParams) (GetAuthTokensRow, error) {
	row := q.db.QueryRow(ctx, getAuthTokens, arg.UserID, arg.AccountID)
	var i GetAuthTokensRow
	err := row.Scan(&i.Provider, &i.AccessToken, &i.RefreshToken)
	return i, err
}

const getLatestSyncTimeAndPagetoken = `-- name: GetLatestSyncTimeAndPagetoken :one
SELECT last_synced_at, sync_page_token FROM linked_account WHERE id = $1
`

type GetLatestSyncTimeAndPagetokenRow struct {
	LastSyncedAt  pgtype.Timestamptz `json:"last_synced_at"`
	SyncPageToken pgtype.Text        `json:"sync_page_token"`
}

func (q *Queries) GetLatestSyncTimeAndPagetoken(ctx context.Context, accountID pgtype.UUID) (GetLatestSyncTimeAndPagetokenRow, error) {
	row := q.db.QueryRow(ctx, getLatestSyncTimeAndPagetoken, accountID)
	var i GetLatestSyncTimeAndPagetokenRow
	err := row.Scan(&i.LastSyncedAt, &i.SyncPageToken)
	return i, err
}

const getLatestSyncTimeByUserID = `-- name: GetLatestSyncTimeByUserID :one
SELECT last_synced_at FROM linked_account WHERE user_id = $1 ORDER BY last_synced_at DESC
`

func (q *Queries) GetLatestSyncTimeByUserID(ctx context.Context, userID string) (pgtype.Timestamptz, error) {
	row := q.db.QueryRow(ctx, getLatestSyncTimeByUserID, userID)
	var last_synced_at pgtype.Timestamptz
	err := row.Scan(&last_synced_at)
	return last_synced_at, err
}

const getLinkedAccountsByUserID = `-- name: GetLinkedAccountsByUserID :many
SELECT provider, name, email, avatar_url, last_synced_at FROM linked_account WHERE user_id = $1
`

type GetLinkedAccountsByUserIDRow struct {
	Provider     ProviderEnum       `json:"provider"`
	Name         string             `json:"name"`
	Email        string             `json:"email"`
	AvatarUrl    pgtype.Text        `json:"avatar_url"`
	LastSyncedAt pgtype.Timestamptz `json:"last_synced_at"`
}

func (q *Queries) GetLinkedAccountsByUserID(ctx context.Context, userID string) ([]GetLinkedAccountsByUserIDRow, error) {
	rows, err := q.db.Query(ctx, getLinkedAccountsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetLinkedAccountsByUserIDRow{}
	for rows.Next() {
		var i GetLinkedAccountsByUserIDRow
		if err := rows.Scan(
			&i.Provider,
			&i.Name,
			&i.Email,
			&i.AvatarUrl,
			&i.LastSyncedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuthTokens = `-- name: UpdateAuthTokens :exec
UPDATE linked_account SET access_token = $1, refresh_token = $2, token_type = $3, expiry = $4, updated_at = NOW() WHERE id = $5
`

type UpdateAuthTokensParams struct {
	AccessToken  string             `json:"access_token"`
	RefreshToken string             `json:"refresh_token"`
	TokenType    pgtype.Text        `json:"token_type"`
	Expiry       pgtype.Timestamptz `json:"expiry"`
	AccountID    pgtype.UUID        `json:"account_id"`
}

func (q *Queries) UpdateAuthTokens(ctx context.Context, arg UpdateAuthTokensParams) error {
	_, err := q.db.Exec(ctx, updateAuthTokens,
		arg.AccessToken,
		arg.RefreshToken,
		arg.TokenType,
		arg.Expiry,
		arg.AccountID,
	)
	return err
}

const updateLastSyncedTimestamp = `-- name: UpdateLastSyncedTimestamp :exec
UPDATE linked_account SET last_synced_at = NOW(), sync_page_token = $1 WHERE id = $2
`

type UpdateLastSyncedTimestampParams struct {
	SyncPageToken pgtype.Text `json:"sync_page_token"`
	AccountID     pgtype.UUID `json:"account_id"`
}

func (q *Queries) UpdateLastSyncedTimestamp(ctx context.Context, arg UpdateLastSyncedTimestampParams) error {
	_, err := q.db.Exec(ctx, updateLastSyncedTimestamp, arg.SyncPageToken, arg.AccountID)
	return err
}

const updateRenewedAuthToken = `-- name: UpdateRenewedAuthToken :exec
UPDATE linked_account SET access_token = $1, token_type = $2, expiry = $3, updated_at = NOW() WHERE id = $4
`

type UpdateRenewedAuthTokenParams struct {
	AccessToken string             `json:"access_token"`
	TokenType   pgtype.Text        `json:"token_type"`
	Expiry      pgtype.Timestamptz `json:"expiry"`
	AccountID   pgtype.UUID        `json:"account_id"`
}

func (q *Queries) UpdateRenewedAuthToken(ctx context.Context, arg UpdateRenewedAuthTokenParams) error {
	_, err := q.db.Exec(ctx, updateRenewedAuthToken,
		arg.AccessToken,
		arg.TokenType,
		arg.Expiry,
		arg.AccountID,
	)
	return err
}
