// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: job_logs.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addNewJobLog = `-- name: AddNewJobLog :exec
INSERT INTO job_logs (
    job_id, account_id, type, status, queue, params
) VALUES (
    $1, $2, $3, $4, $5, $6
)
`

type AddNewJobLogParams struct {
	JobID     string        `json:"job_id"`
	AccountID pgtype.UUID   `json:"account_id"`
	Type      string        `json:"type"`
	Status    JobStatusEnum `json:"status"`
	Queue     string        `json:"queue"`
	Params    []byte        `json:"params"`
}

func (q *Queries) AddNewJobLog(ctx context.Context, arg AddNewJobLogParams) error {
	_, err := q.db.Exec(ctx, addNewJobLog,
		arg.JobID,
		arg.AccountID,
		arg.Type,
		arg.Status,
		arg.Queue,
		arg.Params,
	)
	return err
}

const updateJobLogFailed = `-- name: UpdateJobLogFailed :exec
UPDATE job_logs SET
status = 'failed', error = $1
WHERE job_id = $2
`

type UpdateJobLogFailedParams struct {
	Error pgtype.Text `json:"error"`
	JobID string      `json:"job_id"`
}

func (q *Queries) UpdateJobLogFailed(ctx context.Context, arg UpdateJobLogFailedParams) error {
	_, err := q.db.Exec(ctx, updateJobLogFailed, arg.Error, arg.JobID)
	return err
}

const updateJobLogFinish = `-- name: UpdateJobLogFinish :exec
UPDATE job_logs SET
status = 'succeeded', finished_at = $1
WHERE job_id = $2
`

type UpdateJobLogFinishParams struct {
	FinishedAt pgtype.Timestamptz `json:"finished_at"`
	JobID      string             `json:"job_id"`
}

func (q *Queries) UpdateJobLogFinish(ctx context.Context, arg UpdateJobLogFinishParams) error {
	_, err := q.db.Exec(ctx, updateJobLogFinish, arg.FinishedAt, arg.JobID)
	return err
}

const updateJobLogRetryCount = `-- name: UpdateJobLogRetryCount :exec
UPDATE job_logs SET
status = 'retrying', retries = $1
WHERE job_id = $2
`

type UpdateJobLogRetryCountParams struct {
	Retries pgtype.Int4 `json:"retries"`
	JobID   string      `json:"job_id"`
}

func (q *Queries) UpdateJobLogRetryCount(ctx context.Context, arg UpdateJobLogRetryCountParams) error {
	_, err := q.db.Exec(ctx, updateJobLogRetryCount, arg.Retries, arg.JobID)
	return err
}

const updateJobLogStart = `-- name: UpdateJobLogStart :exec
UPDATE job_logs SET 
status = 'processing', started_at = $1 
WHERE job_id = $2
`

type UpdateJobLogStartParams struct {
	StartedAt pgtype.Timestamptz `json:"started_at"`
	JobID     string             `json:"job_id"`
}

func (q *Queries) UpdateJobLogStart(ctx context.Context, arg UpdateJobLogStartParams) error {
	_, err := q.db.Exec(ctx, updateJobLogStart, arg.StartedAt, arg.JobID)
	return err
}
