// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: copyfrom.go

package repository

import (
	"context"
)

// iteratorForAddSyncedItems implements pgx.CopyFromSource.
type iteratorForAddSyncedItems struct {
	rows                 []AddSyncedItemsParams
	skippedFirstNextCall bool
}

func (r *iteratorForAddSyncedItems) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForAddSyncedItems) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].AccountID,
		r.rows[0].ProviderFileID,
		r.rows[0].Name,
		r.rows[0].Extension,
		r.rows[0].Size,
		r.rows[0].MimeType,
		r.rows[0].ParentFolder,
		r.rows[0].IsFolder,
		r.rows[0].ContentHash,
		r.rows[0].CreatedTime,
		r.rows[0].ModifiedTime,
		r.rows[0].ThumbnailLink,
		r.rows[0].PreviewLink,
		r.rows[0].WebViewLink,
		r.rows[0].WebContentLink,
		r.rows[0].LinkExpiresAt,
	}, nil
}

func (r iteratorForAddSyncedItems) Err() error {
	return nil
}

func (q *Queries) AddSyncedItems(ctx context.Context, arg []AddSyncedItemsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"synced_items"}, []string{"account_id", "provider_file_id", "name", "extension", "size", "mime_type", "parent_folder", "is_folder", "content_hash", "created_time", "modified_time", "thumbnail_link", "preview_link", "web_view_link", "web_content_link", "link_expires_at"}, &iteratorForAddSyncedItems{rows: arg})
}
